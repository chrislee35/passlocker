#!/usr/bin/env python3
from passlocker import PassLocker
import pwinput
import os
import sys
import base64
from binascii import unhexlify

password = None
dbdir = '%s/.passlocker' % os.environ['HOME']
pl = None
words = list()

supported_verbs = {
    'setup': 'display, initialize, or change the configuration',
    'list': 'list account names',
    'info': 'return information about an account, without decrypting the password(s)',
    'get': 'retrieve a password from an account',
    'add': 'add a new account (types: password, otp, totp)',
    'pw': 'add a password to an account',
    'help': 'print out help'
}

def help(cmd=None):
    print("""# Examples
# passlocker help
# passlocker list
# passlocker info account username
# passlocker info hex 74657374206163636f756e74
# passlocker info b64 dGVzdCBhY2NvdW50Cg==
# passlocker get account username
# passlocker add password accountname username password
# passlocker add otp accountname username password1 password2 ...
# passlocker add totp accountname username start_time interval num_digits hash_algo
# passlocker note account username "<note>"
# passlocker pw account username [raw|hex|b64] [file <filename>]
#    it will prompt for the password if no file is specified
# passlocker pw account username [raw|hex|b64] [file <filename>]
# passlocker interactive
# passlocker script <filename>
""")

previous_encoding = 'raw'

def next_word(use_previous_encoding=False):
    if len(words) == 0:
        return None
    word = words.pop(0)
    if word in ['hex', 'b64', 'raw']:
        previous_encoding = word
        return dec(words.pop(0), word)
    elif use_previous_encoding:
        return dec(word, previous_encoding)
    else:
        return word
    
def dec(item, encoding='raw'):
    if encoding == 'hex':
        return unhexlify(item)
    elif encoding == 'b64':
        return base64.b64decode(item)
    elif encoding == 'raw':
        return item.encode('UTF-8')
    elif encoding == 'bytes':
        return item
    return item
    
def pl_prompt(message, default="", options=None):
    while True:
        if options:
            print("Options: [%s]" % ", ".join(options))
        
        a = input('%s: [%s] ' % (message, str(default)))
        if a == None or a == "":
            a = default
        
        a = type(default)(a)
        if options:
            if a in options:
                return a
        else:
            return a

def list_accounts():
    accs = pl.list_accounts()
    filt = next_word()
    if filt:
        accs = [ x for x in accs if filt in str(x) ]
    for acc in accs:
        print(acc.decode('UTF-8'))

def get_account_and_username():
    accname = next_word()
    username = next_word()
    return accname, username

def account_info():
    accname, username = get_account_and_username()
    acc = pl._load_account(accname, username)
    print(acc)

def get_password():
    accname, username = get_account_and_username()
    pw = pl.get_active_password(accname, username)
    print(pw)
    
def add_account():
    try:
        acctype = next_word() or pl_prompt("Which account type?", "password", ["password", "otp", "totp"])
        if acctype == "password":
            add_password_account()
        elif acctype == "otp":
            add_otp_account()
        elif acctype == "totp":
            add_totp_account()
        else:
            help(cmd)
            sys.exit(0)
    except Exception as e:
        #traceback.print_exc(file=sys.stdout)
        print(e)

def add_password_account():
    accname = next_word() or pl_prompt("Account name?")
    username = next_word() or pl_prompt("Username")
    pl.add_account(accname, username, type='password')
    password = next_word()
    if password:
        if password == '-':
            encoding = 'raw'
            password = pwinput.pwinput('Enter password for account, %s %s (%s): ' % (accname, username, encoding), mask='*')
            if password == None or password == "":
                sys.exit(0)
            password = dec(password, encoding)
            pl.add_password(accname, username, password)
        else:
            pl.add_password(accname, username, password)
    
def add_otp_account():    
    accname = next_word() or pl_prompt("Account name?")
    username = next_word() or pl_prompt("Username")
    pl.add_account(accname, username, type='otp')
    password = next_word()
    if password:
        acc = pl._load_account(accname, username)
        # there's a decision that is needed here.    If we add a batch of OTP passwords to
        # a list of existing passwords, should I keep the active password where it's at
        # or point it to the first item of the added items.
        # For now, I will leave the active password index where it's at.
        pa = acc.get('password.active')
        if pa == 0:
            pa = 1
        while password:
            pl.add_password(accname, username, password)
            password = next_word()
        pl.set_active_password(accname, username, pa, skip=1)

def add_totp_account():
    accname = next_word() or pl_prompt("Account name?")
    username = next_word() or pl_prompt("Username")
    word = next_word()
    if word == None:
        epoch_start = pl_prompt('Start time (epoch seconds)', 0)
    else:
        epoch_start = int(word)
    word = next_word()
    if word == None:
        time_interval = pl_prompt('Time interval (seconds)', 30)
    else:
        time_interval = int(word)
    word = next_word()
    if word == None:
        num_digits = pl_prompt('Number of digits to return', 6)
    else:
        num_digits = int(word)
    word = next_word()
    if word == None or not word in ['sha1', 'md5', 'sha256']:
        hash_algorithm = pl_prompt('Which hash algorithm to use', 'sha1', ['sha1', 'md5', 'sha256'])
    else:
        hash_algorithm = word
        
    pl.add_account(accname, username, type='totp', 
        epoch_start=epoch_start, time_interval=time_interval, num_digits=num_digits,
        hash_algorithm=hash_algorithm)        

def del_account():
    accname, username = get_account_and_username()
    confirm = next_word()
    if confirm == None:
        confirm = pl_prompt('Delete account (yes|no)', 'no')
    if confirm and confirm.lower() == 'yes':
        deleted = pl.del_account(accname, username)
        if deleted:
            print("Account, {accname}, deleted.".format(accname=accname))
        else:
            print("Cound not delete {accname}".format(accname=accname))
     
def add_password():
    accname, username = get_account_and_username()
    acc = pl._load_account(accname, username)
    
    passwords = list()
    password = next_word()
    if password == 'file':
        filename = next_word()
        fh = open(filename, 'r')
        passwords = fh.read().split('\n')
        fh.close()
    elif password:
        passwords.append(password)
        password = next_word(True)
        while password:
            passwords.append(password)
            password = next_word(True)
    
    if acc['type'] == 'password':
        if len(passwords) > 0:
            for password in passwords:
                pl.add_password(accname, username, password)
        else:
            encoding = 'raw'
            password = pwinput.pwinput('Enter password for account, %s (%s): ' % (accname, encoding), mask='*')
            if password == None or password == "":
                sys.exit(0)
            password = dec(password, encoding)
            pl.add_password(accname, username, password)
    elif acc['type'] == 'otp':
        index = 1
        if len(passwords) == 0:
            print("Enter OTP passwords, one per line using %s encoding.    Use an empty line to finish." % encoding)
            password = pwinput.pwinput('%d: ' % index, mask='*')
            while password != None and password != "":
                password = dec(password, encoding)
                passwords.append(password)
                index += 1
                password = pwinput.pwinput('%d: ' % index, mask='*')
        if len(passwords) > 0:
            if len(passwords) > 3:
                print("Please be patient.    Encrypting many passwords will take time.")
            for password in passwords:
                password = dec(password, encoding)
                pl.add_password(accname, username, password)
            pl.set_active_password(accname, username, 1, skip=1)
    elif acc['type'] == 'totp':
        encoding = 'raw'
        if len(passwords) > 0:
            for password in passwords:
                password = dec(password, encoding)
                pl.add_password(accname, username, password)
        else:
            password = pwinput.pwinput('Enter secret for TOTP account, %s (%s): ' % (accname, encoding), mask='*')
            password = dec(password, encoding)
            pl.add_password(accname, username, password)
     
def add_note():
    accname, username = get_account_and_username()
    note = next_word()
    if note == None:
        note = input("Note: ")
    if note == None or len(note) == 0:
        return
    pl.add_note(accname, username, note)

def change_password():
    new_password = pwinput.pwinput(prompt="New master password: ", mask='*')
    verify = pwinput.pwinput(prompt="Verify new password: ", mask='*')
    if new_password == verify:
        pl.change_master_password(new_password)
    else:
        print("Passwords did not match.")

def rename_account():
    accname, username = get_account_and_username()
    new_accname, new_username = get_account_and_username()
    pl.rename_account(accname, username, new_accname, new_username)
    
def process():
    cmd = next_word()
    if cmd in ["list", "l"]:
        list_accounts()
    elif cmd in ["info", "i"]:
        account_info()
    elif cmd in ["get", "g"]:
        get_password()
    elif cmd in ["add", "a"]:
        add_account()
    elif cmd in ["del", "d"]:
        del_account()
    elif cmd in ["pw", "p"]:
        add_password()
    elif cmd in ["note", "n"]:
        add_note()
    elif cmd in ["chgpass", "c"]:
        change_password()
    elif cmd in ["rename", "r"]:
        rename_account()
    elif cmd in ["help", "h"]:
        help("interactive")
    else:
        print("Unknown command: %s" % cmd)

if len(sys.argv) == 1:
    help(sys.argv)
    sys.exit(0)

words = sys.argv[1:]
cmd = words[0]
if cmd == "help":
    help(sys.argv)
    sys.exit(0)

def get_master_password():
    return pwinput.pwinput(prompt="Master password: ", mask='*')

pl = PassLocker(get_master_password)

if cmd == "interactive":
    import csv
    while True:
        try:
            line = input("> ")
            if line == None or line == "exit" or line == "quit":
                sys.exit(0)
            words = csv.reader([line], delimiter=' ').__next__()
            process()
        except EOFError:
            print("")
            sys.exit(0)
elif cmd == "script":
    import csv
    next_word()
    filename = next_word()
    with open(filename, 'r') as csvfile:
        script_reader = csv.reader(csvfile, delimiter=' ', quotechar='"')
        for words in script_reader:
            process()
else:
    try:
        process()
    except Exception as e:
        print(e)
