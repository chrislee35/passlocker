#!/usr/bin/env python3
from passlocker import PassLocker
import getpass
import os
import sys
import base64
import pyperclip
from binascii import unhexlify
from pprint import pprint
import secrets
from colorama import Fore, Style

password = None
dbdir = '%s/.passlocker' % os.environ['HOME']
pl = None
words = list()

def next_word(use_previous_encoding=False):
    if len(words) == 0:
        return None
    word = words.pop(0)
    if word in ['hex', 'b64', 'raw']:
        previous_encoding = word
        return dec(words.pop(0), word)
    elif use_previous_encoding:
        return dec(word, previous_encoding)
    else:
        return word
    
def dec(item, encoding='raw'):
    if encoding == 'hex':
        return unhexlify(item)
    elif encoding == 'b64':
        return base64.b64decode(item)
    elif encoding == 'raw':
        return item.encode('UTF-8')
    elif encoding == 'bytes':
        return item
    return item
     
def pl_prompt(message, default="", options=None):
    while True:
        if options:
            print("Options: [%s]" % ", ".join(options))
        
        a = input('%s: [%s] ' % (message, str(default)))
        if a == None or a == "":
            a = default
        try:
            a = type(default)(a)
        except ValueError:
            return default
        
        if options:
            if a in options:
                return a
            if a in [o[0] for o in options]:
                return a
        else:
            return a
        
def help_main():
    print("""help    prints out this help message
list    list password entries
add     creates a new password entry
genpass randomly generates passwords
chpass  change the master password
exit    exits the tool""")

def help_list():
    print("""help   prints out this help message
info    provides information about a password entry
get     retrieves password for a password entry
addpw   adds or updates the password for a password entry
del     deletes a password entry
note    add a note to the password entry
rename  rename this account
exit    returns to the top menu""")

def menu():
    cmd = pl_prompt("Main menu", "exit", ["list", "add", "genpass", "chpass", "clear", "help", "exit"])
    if cmd in ["help", 'h']:
        help_main()
    elif cmd in ["list", "l"]:
        list_accounts()
    elif cmd in ["add", 'a']:
        add_account()
    elif cmd in ["genpass", 'g']:
        generate_password_menu()
    elif cmd in ["chpass", "c"]:
        pl.change_master_password()
    elif cmd in ['exit', 'e']:
        return False
    elif cmd in ["clear"]:
        os.system("clear")
    return True

def list_accounts():
    filt = input("search filter: ")
    accs = pl.list_accounts('\t')
    if filt:
        accs = [ x for x in accs if filt in str(x) ]
    item = 0
    if len(accs) == 0:
        print("No accounts found")
        return
    for acc in accs:
        print(str(item)+"\t"+acc.decode('UTF-8'))
        item += 1
    cmd = pl_prompt("entry #", 0)
    while cmd == 'h':
        help_list()
        cmd = pl_prompt("entry #", 0)
    i = int(cmd)
    accname, username = accs[i].split(b'\t', 1)
    edit_account(accname, username)
    
def edit_account(accname, username):
    if type(accname) == str:
        accname = accname.encode('UTF-8')
    if type(username) == str:
        username = username.encode('UTF-8')
        
    while True:
        cmd = pl_prompt("%s %s" % (accname.decode('UTF-8'), username.decode('UTF-8')), "exit", 
                        ["help","info","get","copy","addpw","del","exit","note","rename","clear"])
        if cmd in ["help", 'h']:
            help_list()
        elif cmd in ["info", 'i']:
            acc = pl._load_account(accname, username)
            pprint(acc)
        elif cmd in ["get", 'g']:
            try:
                pw = pl.get_active_password(accname, username)
                if type(pw) == str:
                    print(Fore.RED+pw+Style.RESET_ALL)
                else:
                    print(Fore.RED+pw.decode('UTF-8')+Style.RESET_ALL)
            except Exception as e:
                print(e)
        elif cmd in ["copy", "c"]:
            try:
                pw = pl.get_active_password(accname, username)
                if type(pw) == str:
                    pyperclip.copy(pw)
                else:
                    pyperclip.copy(pw.decode('UTF-8'))
            except Exception as e:
                print(e)
        elif cmd in ["addpw", 'a']:
            password = getpass.getpass('Enter password for account, {accname}: '.format(accname=accname.decode('UTF-8')))
            if password == None or password == "":
                return
            pl.add_password(accname, username, password)
        elif cmd in ["del", 'd']:
            confirm = pl_prompt('Delete account (yes|no)', 'no')
            if confirm and confirm.lower() in ['yes', 'y'] :
                deleted = pl.del_account(accname, username)
                if deleted:
                    print("Account, {accname}, deleted.".format(accname=accname.decode('UTF-8')))
                    return
                else:
                    print("Cound not delete {accname}".format(accname=accname.decode('UTF-8')))
        elif cmd in ["note", 'n']:
            note = input("Note: ")
            if note and len(note) > 0:
                pl.add_note(accname, username, note)
        elif cmd in ["rename", "r"]:
            new_account_name = pl_prompt("New account name", accname.decode('UTF-8'))
            if not new_account_name: continue
            new_username = pl_prompt("New user name", username.decode('UTF-8'))
            if not new_username: continue
            if new_account_name == accname.decode('UTF-8') and new_username == username.decode('UTF-8'): continue
            pl.rename_account(accname, username, new_account_name, new_username)
            accname = new_account_name.encode('UTF-8')
            username = new_username.encode('UTF-8')
        elif cmd in ["clear"]:
            os.system("clear")
        elif cmd in ['exit', 'e']:
            return
        
def add_account():
    try:
        acctype = pl_prompt("Which account type?", "password", ["password", "otp", "totp"])
        if acctype in ["password", "pw", "p"]:
            add_password_account()
        elif acctype == "otp":
            add_otp_account()
        elif acctype == "totp":
            add_totp_account()
        else:
            return
    except Exception as e:
        #traceback.print_exc(file=sys.stdout)
        print(e)

def add_password_account():
    accname = next_word() or pl_prompt("Account name?")
    username = next_word() or pl_prompt("Username")
    pl.add_account(accname, username, type='password')
    password = next_word()
    if password:
        if password == '-':
            encoding = 'raw'
            password = getpass.getpass('Enter password for account, %s %s (%s): ' % (accname, username, encoding))
            if password == None or password == "":
                sys.exit(0)
            password = dec(password, encoding)
            pl.add_password(accname, username, password)
        else:
            pl.add_password(accname, username, password)
    else:
        edit_account(accname, username)
    
def add_otp_account():    
    accname = next_word() or pl_prompt("Account name?")
    username = next_word() or pl_prompt("Username")
    pl.add_account(accname, username, type='otp')
    password = next_word()
    if password:
        acc = pl._load_account(accname, username)
        # there's a decision that is needed here.    If we add a batch of OTP passwords to
        # a list of existing passwords, should I keep the active password where it's at
        # or point it to the first item of the added items.
        # For now, I will leave the active password index where it's at.
        pa = acc.get('password.active')
        if pa == 0:
            pa = 1
        while password:
            pl.add_password(accname, username, password)
            password = next_word()
        pl.set_active_password(accname, username, pa, skip=1)
    else:
        edit_account(accname, username)

def add_totp_account():
    accname = next_word() or pl_prompt("Account name?")
    username = next_word() or pl_prompt("Username")
    word = next_word()
    if word == None:
        epoch_start = pl_prompt('Start time (epoch seconds)', 0)
    else:
        epoch_start = int(word)
    word = next_word()
    if word == None:
        time_interval = pl_prompt('Time interval (seconds)', 30)
    else:
        time_interval = int(word)
    word = next_word()
    if word == None:
        num_digits = pl_prompt('Number of digits to return', 6)
    else:
        num_digits = int(word)
    word = next_word()
    if word == None or not word in ['sha1', 'md5', 'sha256']:
        hash_algorithm = pl_prompt('Which hash algorithm to use', 'sha1', ['sha1', 'md5', 'sha256'])
    else:
        hash_algorithm = word
        
    pl.add_account(accname, username, type='totp', 
        epoch_start=epoch_start, time_interval=time_interval, num_digits=num_digits,
        hash_algorithm=hash_algorithm)
        
    edit_account(accname, username)

def del_account():
    accname = next_word() or pl_prompt("Account name?")
    username = next_word() or pl_prompt("Username")
    confirm = next_word()
    if confirm == None:
        confirm = pl_prompt('Delete account (yes|no)', 'no')
    if confirm and confirm.lower() == 'yes':
        deleted = pl.del_account(accname, username)
        if deleted:
            print("Account, {accname}, deleted.".format(accname=accname))
        else:
            print("Cound not delete {accname}".format(accname=accname))

def get_master_password(prompt):
    return getpass.getpass(prompt=prompt).encode('UTF-8')

def generate_password_menu():
    gentype = pl_prompt("Password type", "memorable", ["memorable", "random", "numbers"])
    length = pl_prompt("Length", 12)
    count = pl_prompt("How many passwords?", 1)
    for i in range(count):
        if gentype == "memorable":
            print(generate_memorable(length))
        elif gentype == "random":
            print(generate_random(length))
        elif gentype == "numbers":
            print(generate_numbers(length))

def generate_memorable(length):
    if length <= 8:
        maxnum = 100
        special = 0
    elif length <= 16:
        maxnum = 1000
        special = 1
    elif length <= 24:
        maxnum = 10000
        special = 2
    else:
        maxnum = 100000
        special = 3
        
    random_int = secrets.randbelow(maxnum)
    random_special = ''.join(secrets.choice(['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '+', '=', '{', '}', '[', ']', ':', ';', '<', '>', '.', ',', '?', '/', '~', '`']) for i in range(special))
    
    secret_sauce = '%d%s' % (random_int, random_special)
    
    with open('/usr/share/dict/words') as f:
        words = [word.strip() for word in f]
        genlen = 0
        while genlen != length:
            password = secret_sauce.join(secrets.choice(words) for i in range(2))
            genlen = len(password)
            
    return password
    
def generate_random(length):
    return secrets.token_urlsafe(32)[0:length]
    
def generate_numbers(length):
    return ''.join([str(secrets.choice(range(10))) for i in range(length)])

pl = PassLocker(get_master_password)

while menu():
    pass


